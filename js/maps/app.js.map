{"version":3,"sources":["blogzinga.coffee","components/about/about.coffee","components/bloglist/bloglist.coffee"],"names":[],"mappings":"AAAA,GAAA,cAAA,sBAAA,cAAA,WAGqC,QAAA,gBAAG,OACrC,YACA,YACA,WACA,gCAPH,uBAAA,WAWe,QAAA,wBAAC,eAAgB,mBAAoB,kBAAmB,eAGnE,cAA6D,SAAS,QAAQ,MAA9E,cAAc,SAAS,QAAQ,QAC/B,cAAc,SAAS,QAAQ,IAAK,qBAAuB,IAE3D,kBACC,WAAU,GAEX,mBACC,UAAW,eAEZ,eACC,MAAO,SACN,YAAU,EACV,IAAM,SACN,OACG,UACC,YAAc,4DA7BxB,QAgCQ,OAAQ,YAAgB,GAAA,eAC/B,QAAS,iBAAkB,qBAAsB,oBAAqB,gBAAgB,wBCjCvF,IAAA,UAAA,kBAAA,UAAA,WAGiC,QAAA,YAAG,OACjC,YACA,gCALH,mBAAA,WASe,QAAA,oBAAC,gBAEZ,eACG,MAAO,eACN,IAAM,SACN,OACG,IACC,YAAc,+DAhB1B,QAkBQ,OAAQ,QAAY,GAAA,WAC3B,QAAS,iBAAiB,oBCnB3B,IAAA,UAAA,YAAA,sBAAA,gBAAA,KAAA,aAAA,WAAA,aAAA,WAGoC,QAAA,eAAG,OACpC,YACA,YACA,mCANH,sBAAA,WAUe,QAAA,uBAAC,gBAEZ,eACG,MAAO,cACN,IAAM,QACN,OACG,IACC,YAAc,gCACd,WAAa,yDAlBzB,SAAA,WAsBe,QAAA,UAAC,OAAQ,iBACpB,gBAAgB,WAAW,KAAK,SAAC,MAC/B,OAAO,MAAQ,EAAE,OAAO,KAAO,WAQjC,OAAO,QAAU,SAAC,WAChB,QAAO,KAAK,MAEd,OAAO,YAAc,SAAC,WACpB,QAAO,WAAa,wBApC1B,gBAAA,WAyCe,QAAA,iBAAC,MAAO,QACnB,OACE,SAAW,iBACT,OAAM,IAAK,wFAAuF,KAAK,SAAC,MACtG,GAAA,qBAAA,eAAgB,KAAK,KAAK,QAC1B,QAAQ,SAAS,OAAO,OAAO,8CA9CzC,KAAA,WAmDe,QAAA,QACX,MAAO,UAAC,2CACN,MAAM,KAAO,MAAA,uBArDnB,aAAA,WAwDe,QAAA,gBACX,OACE,SAAW,IACX,KAAM,SAAC,OAAQ,UACb,GAAA,SAAA,MAAA,UAAY,gBAAiB,gBAAiB,gBAAiB,eAAgB,cAE/E,OAAS,iBACP,MAAK,MAAM,KAAK,UAAY,QAAQ,OAAS,KAE/C,SAAS,SAAS,SAAS,QAAQ,oCAjE3C,YAAA,WAsEe,QAAA,eACX,OACE,QAAU,IACV,KAAM,SAAC,OAAQ,UACb,GAAA,SAAA,aAAA,UAAY,gBAAiB,gBAAiB,gBAAiB,eAAgB,cAE/E,OAAS,iBACP,MAAK,MAAM,KAAK,UAAY,QAAQ,OAAS,KAE/C,SAAS,SAAS,QAAQ,mCA/ElC,QAoFQ,OAAQ,WAAe,GAAA,cAC9B,QAAS,iBAAiB,wBAC1B,WAAY,sBAAuB,SAAU,kBAAmB,SAAS,WACzE,QAAS,mBAAoB,QAAS,SAAS,kBAC/C,OAAQ,QAAQ,OAChB,UAAW,gBAAgB,eAC3B,UAAW,eAAe","file":"app.js","sourcesContent":["###\nApp Module\n###\nclass BlogzingaApp then constructor: -> return [\n  'ui.router'\n  'templates'\n  'bloglist'\n  'about'\n]\n\nclass BlogzingaConfiguration\n  constructor: ($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) ->\n\n    # Disable caching for IE\n    $httpProvider.defaults.headers.get = {} unless $httpProvider.defaults.headers.get\n    $httpProvider.defaults.headers.get['If-Modified-Since'] = '0'\n\n    $locationProvider\n    .html5Mode off\n\n    $urlRouterProvider\n    .otherwise '/blogs/list'\n\n    $stateProvider\n    .state 'blogs',\n      abstract: true\n      url: '/blogs'\n      views:\n        'template':\n          templateUrl: 'components/home.html'\n\n\nangular.module('blogzinga', new BlogzingaApp())\n.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', '$httpProvider', BlogzingaConfiguration])","###\nApp Module\n###\nclass AboutApp then constructor: -> return [\n  'ui.router'\n  'templates'\n]\n\nclass AboutConfiguration\n  constructor: ($stateProvider) ->\n\n    $stateProvider\n      .state 'blogs.about',\n        url: '/about'\n        views:\n          '':\n            templateUrl: 'components/about/about.html'\n\nangular.module('about', new AboutApp())\n.config(['$stateProvider', AboutConfiguration])","###\nApp Module\n###\nclass BlogListApp then constructor: -> return [\n  'ui.router'\n  'templates'\n  'ab-base64'\n]\n\nclass BlogListConfiguration\n  constructor: ($stateProvider) ->\n\n    $stateProvider\n      .state 'blogs.list',\n        url: '/list'\n        views:\n          '':\n            templateUrl: 'components/bloglist/list.html'\n            controller: 'blogListController'\n\n\nclass BlogList\n  constructor: ($scope, BlogListService, base64) ->\n    BlogListService.getBlogs().then (resp) ->\n      $scope.blogs = _.sortBy resp, 'title'\n      #for blog in $scope.blogs\n      #  for author, i in blog.authors\n      #    blog['author_' + i] = author\n      #  for tag, i in blog.tags\n      #    blog['tag_' + i] = tag\n      return\n    \n    $scope.openUrl = (url) ->\n      window.open url\n      \n    $scope.filterByTag = (tag) ->\n      $scope.filterBlog = tag\n\n\n\nclass BlogListService\n  constructor: ($http, base64) ->\n    return {\n      getBlogs : () ->\n        $http.get('https://api.github.com/repos/cosenonjaviste/blogzinga/contents/blogs.json?ref=master').then (resp) ->\n          base64Content = resp.data.content\n          angular.fromJson base64.decode base64Content\n\n    }\n\nclass Join\n  constructor: ->\n    return (value) ->\n      value.join? ', '\n      \nclass RandomHeader\n  constructor: ->\n    return {\n      restrict: 'A'\n      link: ($scope, $element, $attrs) ->\n        classes = ['panel-primary', 'panel-success', 'panel-warning', 'panel-danger', 'panel-info']\n        \n        random = () ->\n          Math.floor Math.random() * (classes.length - 1);\n          \n        $element.parent().addClass classes[random()]\n        return\n    }\n    \nclass RandomLabel\n  constructor: ->\n    return {\n      restict: 'A',\n      link: ($scope, $element, $attrs) ->\n        classes = ['label-primary', 'label-success', 'label-warning', 'label-danger', 'label-info']\n\n        random = () ->\n          Math.floor Math.random() * (classes.length - 1);\n          \n        $element.addClass classes[random()]\n    }\n\n\n\nangular.module('bloglist', new BlogListApp())\n.config(['$stateProvider', BlogListConfiguration])\n.controller('blogListController', ['$scope', 'BlogListService', 'base64', BlogList])\n.factory('BlogListService', ['$http', 'base64', BlogListService])\n.filter('join', [Join])\n.directive('randomHeader', [RandomHeader])\n.directive('randomLabel', [RandomLabel])"],"sourceRoot":"/source/"}